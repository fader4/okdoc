// Code generated by goyacc -p py -o py_parser.go py_parser.y. DO NOT EDIT.

//line py_parser.y:2
package okdoc

import __yyfmt__ "fmt"

//line py_parser.y:2

import (
	"fmt"
)

//line py_parser.y:11
type pySymType struct {
	yys   int
	token *tokenWithData
	node  *node
}

const commentInline = 57346
const commentMultiline = 57347
const ident = 57348
const boolLiteral = 57349
const integerLiteral = 57350
const floatLiteral = 57351
const stringLiteral = 57352
const defKeyword = 57353
const loadKeyword = 57354
const returnKeyword = 57355
const moduleKeyword = 57356

var pyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"commentInline",
	"commentMultiline",
	"ident",
	"boolLiteral",
	"integerLiteral",
	"floatLiteral",
	"stringLiteral",
	"defKeyword",
	"loadKeyword",
	"returnKeyword",
	"moduleKeyword",
	"'.'",
	"','",
	"':'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"'='",
	"'*'",
}

var pyStatenames = [...]string{}

const pyEofCode = 1
const pyErrCode = 2
const pyInitialStackSize = 16

//line yacctab:1
var pyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const pyPrivate = 57344

const pyLast = 37

var pyAct = [...]int{
	10, 11, 16, 24, 23, 30, 8, 12, 14, 13,
	15, 22, 26, 26, 17, 18, 25, 25, 21, 26,
	19, 27, 20, 25, 9, 32, 28, 29, 7, 5,
	4, 1, 31, 6, 3, 29, 2,
}

var pyPact = [...]int{
	-1000, -1000, -4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 16, -1000, 0, -7, -1000, -1000, -1000, -1000,
	-1000, 13, 11, 7, -19, -1000, -1000, 13, -1000, -19,
	-1000, 6, -1000,
}

var pyPgo = [...]int{
	0, 36, 34, 33, 31, 30, 29, 28, 24, 4,
	3,
}

var pyR1 = [...]int{
	0, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 7, 5, 6, 10, 10, 10, 9,
	9, 8, 8, 8, 8,
}

var pyR2 = [...]int{
	0, 1, 0, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 4, 5, 2, 1, 1, 1, 2, 1,
	2, 1, 1, 1, 1,
}

var pyChk = [...]int{
	-1000, -4, -1, -2, -5, -6, -3, -7, 10, -8,
	4, 5, 11, 13, 12, 14, 6, 18, 19, 24,
	6, 18, 18, -9, -10, 10, 6, 10, 19, -10,
	24, -9, 19,
}

var pyDef = [...]int{
	2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 0, 15, 0, 0, 21, 22, 23, 24,
	14, 0, 0, 0, 19, 16, 17, 0, 12, 20,
	18, 0, 13,
}

var pyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	18, 19, 25, 3, 16, 3, 15, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 17, 3,
	3, 24, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 20, 3, 21, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 22, 3, 23,
}

var pyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14,
}

var pyTok3 = [...]int{
	0,
}

var pyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	pyDebug        = 0
	pyErrorVerbose = false
)

type pyLexer interface {
	Lex(lval *pySymType) int
	Error(s string)
}

type pyParser interface {
	Parse(pyLexer) int
	Lookahead() int
}

type pyParserImpl struct {
	lval  pySymType
	stack [pyInitialStackSize]pySymType
	char  int
}

func (p *pyParserImpl) Lookahead() int {
	return p.char
}

func pyNewParser() pyParser {
	return &pyParserImpl{}
}

const pyFlag = -1000

func pyTokname(c int) string {
	if c >= 1 && c-1 < len(pyToknames) {
		if pyToknames[c-1] != "" {
			return pyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func pyStatname(s int) string {
	if s >= 0 && s < len(pyStatenames) {
		if pyStatenames[s] != "" {
			return pyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func pyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !pyErrorVerbose {
		return "syntax error"
	}

	for _, e := range pyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + pyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := pyPact[state]
	for tok := TOKSTART; tok-1 < len(pyToknames); tok++ {
		if n := base + tok; n >= 0 && n < pyLast && pyChk[pyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if pyDef[state] == -2 {
		i := 0
		for pyExca[i] != -1 || pyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; pyExca[i] >= 0; i += 2 {
			tok := pyExca[i]
			if tok < TOKSTART || pyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if pyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += pyTokname(tok)
	}
	return res
}

func pylex1(lex pyLexer, lval *pySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = pyTok1[0]
		goto out
	}
	if char < len(pyTok1) {
		token = pyTok1[char]
		goto out
	}
	if char >= pyPrivate {
		if char < pyPrivate+len(pyTok2) {
			token = pyTok2[char-pyPrivate]
			goto out
		}
	}
	for i := 0; i < len(pyTok3); i += 2 {
		token = pyTok3[i+0]
		if token == char {
			token = pyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = pyTok2[1] /* unknown char */
	}
	if pyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", pyTokname(token), uint(char))
	}
	return char, token
}

func pyParse(pylex pyLexer) int {
	return pyNewParser().Parse(pylex)
}

func (pyrcvr *pyParserImpl) Parse(pylex pyLexer) int {
	var pyn int
	var pyVAL pySymType
	var pyDollar []pySymType
	_ = pyDollar // silence set and not used
	pyS := pyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	pystate := 0
	pyrcvr.char = -1
	pytoken := -1 // pyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		pystate = -1
		pyrcvr.char = -1
		pytoken = -1
	}()
	pyp := -1
	goto pystack

ret0:
	return 0

ret1:
	return 1

pystack:
	/* put a state and value onto the stack */
	if pyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", pyTokname(pytoken), pyStatname(pystate))
	}

	pyp++
	if pyp >= len(pyS) {
		nyys := make([]pySymType, len(pyS)*2)
		copy(nyys, pyS)
		pyS = nyys
	}
	pyS[pyp] = pyVAL
	pyS[pyp].yys = pystate

pynewstate:
	pyn = pyPact[pystate]
	if pyn <= pyFlag {
		goto pydefault /* simple state */
	}
	if pyrcvr.char < 0 {
		pyrcvr.char, pytoken = pylex1(pylex, &pyrcvr.lval)
	}
	pyn += pytoken
	if pyn < 0 || pyn >= pyLast {
		goto pydefault
	}
	pyn = pyAct[pyn]
	if pyChk[pyn] == pytoken { /* valid shift */
		pyrcvr.char = -1
		pytoken = -1
		pyVAL = pyrcvr.lval
		pystate = pyn
		if Errflag > 0 {
			Errflag--
		}
		goto pystack
	}

pydefault:
	/* default state action */
	pyn = pyDef[pystate]
	if pyn == -2 {
		if pyrcvr.char < 0 {
			pyrcvr.char, pytoken = pylex1(pylex, &pyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if pyExca[xi+0] == -1 && pyExca[xi+1] == pystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			pyn = pyExca[xi+0]
			if pyn < 0 || pyn == pytoken {
				break
			}
		}
		pyn = pyExca[xi+1]
		if pyn < 0 {
			goto ret0
		}
	}
	if pyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			pylex.Error(pyErrorMessage(pystate, pytoken))
			Nerrs++
			if pyDebug >= 1 {
				__yyfmt__.Printf("%s", pyStatname(pystate))
				__yyfmt__.Printf(" saw %s\n", pyTokname(pytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for pyp >= 0 {
				pyn = pyPact[pyS[pyp].yys] + pyErrCode
				if pyn >= 0 && pyn < pyLast {
					pystate = pyAct[pyn] /* simulate a shift of "error" */
					if pyChk[pystate] == pyErrCode {
						goto pystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if pyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", pyS[pyp].yys)
				}
				pyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if pyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", pyTokname(pytoken))
			}
			if pytoken == pyEofCode {
				goto ret1
			}
			pyrcvr.char = -1
			pytoken = -1
			goto pynewstate /* try again in the same state */
		}
	}

	/* reduction by production pyn */
	if pyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", pyn, pyStatname(pystate))
	}

	pynt := pyn
	pypt := pyp
	_ = pypt // guard against "declared and not used"

	pyp -= pyR2[pyn]
	// pyp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if pyp+1 >= len(pyS) {
		nyys := make([]pySymType, len(pyS)*2)
		copy(nyys, pyS)
		pyS = nyys
	}
	pyVAL = pyS[pyp+1]

	/* consult goto table to find next state */
	pyn = pyR1[pyn]
	pyg := pyPgo[pyn]
	pyj := pyg + pyS[pyp].yys + 1

	if pyj >= pyLast {
		pystate = pyAct[pyg]
	} else {
		pystate = pyAct[pyj]
		if pyChk[pystate] != -pyn {
			pystate = pyAct[pyg]
		}
	}
	// dummy call; replaced with literal code
	switch pynt {

	case 2:
		pyDollar = pyS[pypt-0 : pypt+1]
//line py_parser.y:36
		{
		}
	case 3:
		pyDollar = pyS[pypt-2 : pypt+1]
//line py_parser.y:39
		{
			fmt.Println("Comment")
		}
	case 4:
		pyDollar = pyS[pypt-2 : pypt+1]
//line py_parser.y:43
		{
			// fmt.Println("DefStmt")
		}
	case 5:
		pyDollar = pyS[pypt-2 : pypt+1]
//line py_parser.y:47
		{
			fmt.Println("ReturnStmt")
		}
	case 6:
		pyDollar = pyS[pypt-2 : pypt+1]
//line py_parser.y:51
		{
			fmt.Println("LoadStmt")
		}
	case 7:
		pyDollar = pyS[pypt-2 : pypt+1]
//line py_parser.y:55
		{
			// fmt.Println("ModuleStmt")
		}
	case 8:
		pyDollar = pyS[pypt-2 : pypt+1]
//line py_parser.y:59
		{
			fmt.Println("stringLiteral")
		}
	case 10:
		pyDollar = pyS[pypt-1 : pypt+1]
//line py_parser.y:66
		{
		}
	case 11:
		pyDollar = pyS[pypt-1 : pypt+1]
//line py_parser.y:67
		{
		}
	case 12:
		pyDollar = pyS[pypt-4 : pypt+1]
//line py_parser.y:72
		{
		}
	case 13:
		pyDollar = pyS[pypt-5 : pypt+1]
//line py_parser.y:76
		{
			fmt.Println("Named module:", pyDollar[3].token)
		}
	case 14:
		pyDollar = pyS[pypt-2 : pypt+1]
//line py_parser.y:81
		{
			fmt.Println("Function:", pyDollar[2].token)
		}
	case 15:
		pyDollar = pyS[pypt-1 : pypt+1]
//line py_parser.y:86
		{
		}
	}
	goto pystack /* stack new state and value */
}
