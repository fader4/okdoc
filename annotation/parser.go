// Code generated by goyacc -p annotation -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package annotation

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/fader4/okdoc/syntax"
)

//line parser.y:12
type annotationSymType struct {
	yys   int
	token *syntax.Token
}

const ident = 57346
const stringLiteral = 57347
const boolLiteral = 57348
const integerLiteral = 57349
const floatLiteral = 57350
const annotation = 57351
const beginAnnotation = 57352
const endAnnotation = 57353

var annotationToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ident",
	"'('",
	"')'",
	"'@'",
	"'='",
	"','",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"stringLiteral",
	"boolLiteral",
	"integerLiteral",
	"floatLiteral",
	"annotation",
	"beginAnnotation",
	"endAnnotation",
	"'.'",
}

var annotationStatenames = [...]string{}

const annotationEofCode = 1
const annotationErrCode = 2
const annotationInitialStackSize = 16

//line yacctab:1
var annotationExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const annotationPrivate = 57344

const annotationLast = 73

var annotationAct = [...]int{
	10, 35, 34, 11, 27, 38, 19, 41, 32, 44,
	29, 40, 28, 20, 13, 14, 15, 16, 43, 3,
	42, 24, 26, 25, 23, 9, 12, 39, 29, 33,
	28, 31, 13, 14, 15, 16, 13, 14, 15, 16,
	17, 6, 33, 18, 21, 47, 50, 48, 49, 46,
	45, 29, 12, 28, 7, 13, 14, 15, 16, 39,
	22, 5, 13, 14, 15, 16, 36, 37, 30, 1,
	8, 4, 2,
}

var annotationPact = [...]int{
	-1000, -1000, 12, 57, -1000, 36, 48, -1000, 34, -1000,
	-1000, -15, 5, -1000, -1000, -1000, -1000, -1000, 22, 56,
	0, -1000, -1000, -15, -1000, -1000, -1000, -1000, 18, 55,
	-2, -1000, -1000, -1000, -1000, -1000, -1000, 9, -1000, 1,
	-1000, 41, -1000, 23, 0, -1000, -1000, -1000, -1000, -15,
	-1000,
}

var annotationPgo = [...]int{
	0, 72, 71, 25, 70, 69, 0, 3, 2, 1,
	68, 8, 67, 5,
}

var annotationR1 = [...]int{
	0, 5, 1, 1, 2, 2, 2, 4, 4, 3,
	3, 3, 3, 3, 3, 7, 7, 6, 6, 6,
	6, 8, 8, 10, 10, 11, 11, 11, 9, 9,
	12, 12, 13, 13, 13, 13,
}

var annotationR2 = [...]int{
	0, 1, 0, 3, 1, 3, 4, 3, 1, 1,
	1, 3, 3, 3, 3, 1, 3, 1, 1, 1,
	1, 3, 2, 1, 3, 1, 1, 1, 2, 3,
	1, 3, 3, 3, 3, 3,
}

var annotationChk = [...]int{
	-1000, -5, -1, 7, -2, 4, 5, 6, -4, -3,
	-6, -7, 4, 14, 15, 16, 17, 6, 9, 21,
	8, -3, 4, -7, -6, -8, -9, 4, 12, 10,
	-10, 13, -11, -6, -8, -9, 11, -12, -13, 4,
	13, 9, 11, 9, 8, -11, -13, -6, -8, -7,
	-9,
}

var annotationDef = [...]int{
	2, -2, 1, 0, 3, 4, 0, 5, 0, 8,
	9, 10, 15, 17, 18, 19, 20, 6, 0, 0,
	0, 7, 16, 11, 12, 13, 14, 15, 0, 0,
	0, 22, 23, 25, 26, 27, 28, 0, 30, 0,
	21, 0, 29, 0, 0, 24, 31, 32, 33, 34,
	35,
}

var annotationTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 3, 3, 9, 3, 21, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 8, 3, 3, 7, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 12, 3, 13, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 10, 3, 11,
}

var annotationTok2 = [...]int{
	2, 3, 4, 14, 15, 16, 17, 18, 19, 20,
}

var annotationTok3 = [...]int{
	0,
}

var annotationErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	annotationDebug        = 0
	annotationErrorVerbose = false
)

type annotationLexer interface {
	Lex(lval *annotationSymType) int
	Error(s string)
}

type annotationParser interface {
	Parse(annotationLexer) int
	Lookahead() int
}

type annotationParserImpl struct {
	lval  annotationSymType
	stack [annotationInitialStackSize]annotationSymType
	char  int
}

func (p *annotationParserImpl) Lookahead() int {
	return p.char
}

func annotationNewParser() annotationParser {
	return &annotationParserImpl{}
}

const annotationFlag = -1000

func annotationTokname(c int) string {
	if c >= 1 && c-1 < len(annotationToknames) {
		if annotationToknames[c-1] != "" {
			return annotationToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func annotationStatname(s int) string {
	if s >= 0 && s < len(annotationStatenames) {
		if annotationStatenames[s] != "" {
			return annotationStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func annotationErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !annotationErrorVerbose {
		return "syntax error"
	}

	for _, e := range annotationErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + annotationTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := annotationPact[state]
	for tok := TOKSTART; tok-1 < len(annotationToknames); tok++ {
		if n := base + tok; n >= 0 && n < annotationLast && annotationChk[annotationAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if annotationDef[state] == -2 {
		i := 0
		for annotationExca[i] != -1 || annotationExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; annotationExca[i] >= 0; i += 2 {
			tok := annotationExca[i]
			if tok < TOKSTART || annotationExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if annotationExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += annotationTokname(tok)
	}
	return res
}

func annotationlex1(lex annotationLexer, lval *annotationSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = annotationTok1[0]
		goto out
	}
	if char < len(annotationTok1) {
		token = annotationTok1[char]
		goto out
	}
	if char >= annotationPrivate {
		if char < annotationPrivate+len(annotationTok2) {
			token = annotationTok2[char-annotationPrivate]
			goto out
		}
	}
	for i := 0; i < len(annotationTok3); i += 2 {
		token = annotationTok3[i+0]
		if token == char {
			token = annotationTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = annotationTok2[1] /* unknown char */
	}
	if annotationDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", annotationTokname(token), uint(char))
	}
	return char, token
}

func annotationParse(annotationlex annotationLexer) int {
	return annotationNewParser().Parse(annotationlex)
}

func (annotationrcvr *annotationParserImpl) Parse(annotationlex annotationLexer) int {
	var annotationn int
	var annotationVAL annotationSymType
	var annotationDollar []annotationSymType
	_ = annotationDollar // silence set and not used
	annotationS := annotationrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	annotationstate := 0
	annotationrcvr.char = -1
	annotationtoken := -1 // annotationrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		annotationstate = -1
		annotationrcvr.char = -1
		annotationtoken = -1
	}()
	annotationp := -1
	goto annotationstack

ret0:
	return 0

ret1:
	return 1

annotationstack:
	/* put a state and value onto the stack */
	if annotationDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", annotationTokname(annotationtoken), annotationStatname(annotationstate))
	}

	annotationp++
	if annotationp >= len(annotationS) {
		nyys := make([]annotationSymType, len(annotationS)*2)
		copy(nyys, annotationS)
		annotationS = nyys
	}
	annotationS[annotationp] = annotationVAL
	annotationS[annotationp].yys = annotationstate

annotationnewstate:
	annotationn = annotationPact[annotationstate]
	if annotationn <= annotationFlag {
		goto annotationdefault /* simple state */
	}
	if annotationrcvr.char < 0 {
		annotationrcvr.char, annotationtoken = annotationlex1(annotationlex, &annotationrcvr.lval)
	}
	annotationn += annotationtoken
	if annotationn < 0 || annotationn >= annotationLast {
		goto annotationdefault
	}
	annotationn = annotationAct[annotationn]
	if annotationChk[annotationn] == annotationtoken { /* valid shift */
		annotationrcvr.char = -1
		annotationtoken = -1
		annotationVAL = annotationrcvr.lval
		annotationstate = annotationn
		if Errflag > 0 {
			Errflag--
		}
		goto annotationstack
	}

annotationdefault:
	/* default state action */
	annotationn = annotationDef[annotationstate]
	if annotationn == -2 {
		if annotationrcvr.char < 0 {
			annotationrcvr.char, annotationtoken = annotationlex1(annotationlex, &annotationrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if annotationExca[xi+0] == -1 && annotationExca[xi+1] == annotationstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			annotationn = annotationExca[xi+0]
			if annotationn < 0 || annotationn == annotationtoken {
				break
			}
		}
		annotationn = annotationExca[xi+1]
		if annotationn < 0 {
			goto ret0
		}
	}
	if annotationn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			annotationlex.Error(annotationErrorMessage(annotationstate, annotationtoken))
			Nerrs++
			if annotationDebug >= 1 {
				__yyfmt__.Printf("%s", annotationStatname(annotationstate))
				__yyfmt__.Printf(" saw %s\n", annotationTokname(annotationtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for annotationp >= 0 {
				annotationn = annotationPact[annotationS[annotationp].yys] + annotationErrCode
				if annotationn >= 0 && annotationn < annotationLast {
					annotationstate = annotationAct[annotationn] /* simulate a shift of "error" */
					if annotationChk[annotationstate] == annotationErrCode {
						goto annotationstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if annotationDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", annotationS[annotationp].yys)
				}
				annotationp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if annotationDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", annotationTokname(annotationtoken))
			}
			if annotationtoken == annotationEofCode {
				goto ret1
			}
			annotationrcvr.char = -1
			annotationtoken = -1
			goto annotationnewstate /* try again in the same state */
		}
	}

	/* reduction by production annotationn */
	if annotationDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", annotationn, annotationStatname(annotationstate))
	}

	annotationnt := annotationn
	annotationpt := annotationp
	_ = annotationpt // guard against "declared and not used"

	annotationp -= annotationR2[annotationn]
	// annotationp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if annotationp+1 >= len(annotationS) {
		nyys := make([]annotationSymType, len(annotationS)*2)
		copy(nyys, annotationS)
		annotationS = nyys
	}
	annotationVAL = annotationS[annotationp+1]

	/* consult goto table to find next state */
	annotationn = annotationR1[annotationn]
	annotationg := annotationPgo[annotationn]
	annotationj := annotationg + annotationS[annotationp].yys + 1

	if annotationj >= annotationLast {
		annotationstate = annotationAct[annotationg]
	} else {
		annotationstate = annotationAct[annotationj]
		if annotationChk[annotationstate] != -annotationn {
			annotationstate = annotationAct[annotationg]
		}
	}
	// dummy call; replaced with literal code
	switch annotationnt {

	case 1:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:29
		{
			fmt.Println("Init content")
		}
	case 2:
		annotationDollar = annotationS[annotationpt-0 : annotationpt+1]
//line parser.y:33
		{
			fmt.Println("empty")
		}
	case 3:
		annotationDollar = annotationS[annotationpt-3 : annotationpt+1]
//line parser.y:37
		{
			fmt.Println("Annotation:", annotationDollar[2].token.Pos)
		}
	case 4:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:43
		{
		}
	case 5:
		annotationDollar = annotationS[annotationpt-3 : annotationpt+1]
//line parser.y:44
		{
		}
	case 6:
		annotationDollar = annotationS[annotationpt-4 : annotationpt+1]
//line parser.y:45
		{
		}
	case 9:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:50
		{
		}
	case 10:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:51
		{
		}
	case 11:
		annotationDollar = annotationS[annotationpt-3 : annotationpt+1]
//line parser.y:52
		{
		}
	case 12:
		annotationDollar = annotationS[annotationpt-3 : annotationpt+1]
//line parser.y:53
		{
		}
	case 13:
		annotationDollar = annotationS[annotationpt-3 : annotationpt+1]
//line parser.y:54
		{
		}
	case 14:
		annotationDollar = annotationS[annotationpt-3 : annotationpt+1]
//line parser.y:55
		{
		}
	case 17:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:60
		{
		}
	case 18:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:60
		{
		}
	case 19:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:60
		{
		}
	case 20:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:60
		{
		}
	case 25:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:71
		{
		}
	case 26:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:72
		{
		}
	case 27:
		annotationDollar = annotationS[annotationpt-1 : annotationpt+1]
//line parser.y:73
		{
		}
	}
	goto annotationstack /* stack new state and value */
}
