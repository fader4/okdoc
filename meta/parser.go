// Code generated by goyacc -p meta -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package meta

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/fader4/okdoc/syntax"
)

//line parser.y:12
type metaSymType struct {
	yys   int
	token *syntax.Token
}

const ident = 57346
const stringLiteral = 57347

var metaToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ident",
	"stringLiteral",
	"'('",
	"')'",
	"'='",
}

var metaStatenames = [...]string{}

const metaEofCode = 1
const metaErrCode = 2
const metaInitialStackSize = 16

//line yacctab:1
var metaExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const metaPrivate = 57344

const metaLast = 8

var metaAct = [...]int{
	4, 8, 5, 6, 7, 1, 3, 2,
}

var metaPact = [...]int{
	-1000, -1000, -4, -1000, -1000, -1000, -1000, -1000, -1000,
}

var metaPgo = [...]int{
	0, 7, 6, 5,
}

var metaR1 = [...]int{
	0, 3, 1, 1, 2, 2, 2, 2, 2,
}

var metaR2 = [...]int{
	0, 1, 0, 2, 1, 1, 1, 1, 1,
}

var metaChk = [...]int{
	-1000, -3, -1, -2, 4, 6, 7, 8, 5,
}

var metaDef = [...]int{
	2, -2, 1, 3, 4, 5, 6, 7, 8,
}

var metaTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	6, 7, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 8,
}

var metaTok2 = [...]int{
	2, 3, 4, 5,
}

var metaTok3 = [...]int{
	0,
}

var metaErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	metaDebug        = 0
	metaErrorVerbose = false
)

type metaLexer interface {
	Lex(lval *metaSymType) int
	Error(s string)
}

type metaParser interface {
	Parse(metaLexer) int
	Lookahead() int
}

type metaParserImpl struct {
	lval  metaSymType
	stack [metaInitialStackSize]metaSymType
	char  int
}

func (p *metaParserImpl) Lookahead() int {
	return p.char
}

func metaNewParser() metaParser {
	return &metaParserImpl{}
}

const metaFlag = -1000

func metaTokname(c int) string {
	if c >= 1 && c-1 < len(metaToknames) {
		if metaToknames[c-1] != "" {
			return metaToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func metaStatname(s int) string {
	if s >= 0 && s < len(metaStatenames) {
		if metaStatenames[s] != "" {
			return metaStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func metaErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !metaErrorVerbose {
		return "syntax error"
	}

	for _, e := range metaErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + metaTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := metaPact[state]
	for tok := TOKSTART; tok-1 < len(metaToknames); tok++ {
		if n := base + tok; n >= 0 && n < metaLast && metaChk[metaAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if metaDef[state] == -2 {
		i := 0
		for metaExca[i] != -1 || metaExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; metaExca[i] >= 0; i += 2 {
			tok := metaExca[i]
			if tok < TOKSTART || metaExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if metaExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += metaTokname(tok)
	}
	return res
}

func metalex1(lex metaLexer, lval *metaSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = metaTok1[0]
		goto out
	}
	if char < len(metaTok1) {
		token = metaTok1[char]
		goto out
	}
	if char >= metaPrivate {
		if char < metaPrivate+len(metaTok2) {
			token = metaTok2[char-metaPrivate]
			goto out
		}
	}
	for i := 0; i < len(metaTok3); i += 2 {
		token = metaTok3[i+0]
		if token == char {
			token = metaTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = metaTok2[1] /* unknown char */
	}
	if metaDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", metaTokname(token), uint(char))
	}
	return char, token
}

func metaParse(metalex metaLexer) int {
	return metaNewParser().Parse(metalex)
}

func (metarcvr *metaParserImpl) Parse(metalex metaLexer) int {
	var metan int
	var metaVAL metaSymType
	var metaDollar []metaSymType
	_ = metaDollar // silence set and not used
	metaS := metarcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	metastate := 0
	metarcvr.char = -1
	metatoken := -1 // metarcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		metastate = -1
		metarcvr.char = -1
		metatoken = -1
	}()
	metap := -1
	goto metastack

ret0:
	return 0

ret1:
	return 1

metastack:
	/* put a state and value onto the stack */
	if metaDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", metaTokname(metatoken), metaStatname(metastate))
	}

	metap++
	if metap >= len(metaS) {
		nyys := make([]metaSymType, len(metaS)*2)
		copy(nyys, metaS)
		metaS = nyys
	}
	metaS[metap] = metaVAL
	metaS[metap].yys = metastate

metanewstate:
	metan = metaPact[metastate]
	if metan <= metaFlag {
		goto metadefault /* simple state */
	}
	if metarcvr.char < 0 {
		metarcvr.char, metatoken = metalex1(metalex, &metarcvr.lval)
	}
	metan += metatoken
	if metan < 0 || metan >= metaLast {
		goto metadefault
	}
	metan = metaAct[metan]
	if metaChk[metan] == metatoken { /* valid shift */
		metarcvr.char = -1
		metatoken = -1
		metaVAL = metarcvr.lval
		metastate = metan
		if Errflag > 0 {
			Errflag--
		}
		goto metastack
	}

metadefault:
	/* default state action */
	metan = metaDef[metastate]
	if metan == -2 {
		if metarcvr.char < 0 {
			metarcvr.char, metatoken = metalex1(metalex, &metarcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if metaExca[xi+0] == -1 && metaExca[xi+1] == metastate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			metan = metaExca[xi+0]
			if metan < 0 || metan == metatoken {
				break
			}
		}
		metan = metaExca[xi+1]
		if metan < 0 {
			goto ret0
		}
	}
	if metan == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			metalex.Error(metaErrorMessage(metastate, metatoken))
			Nerrs++
			if metaDebug >= 1 {
				__yyfmt__.Printf("%s", metaStatname(metastate))
				__yyfmt__.Printf(" saw %s\n", metaTokname(metatoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for metap >= 0 {
				metan = metaPact[metaS[metap].yys] + metaErrCode
				if metan >= 0 && metan < metaLast {
					metastate = metaAct[metan] /* simulate a shift of "error" */
					if metaChk[metastate] == metaErrCode {
						goto metastack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if metaDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", metaS[metap].yys)
				}
				metap--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if metaDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", metaTokname(metatoken))
			}
			if metatoken == metaEofCode {
				goto ret1
			}
			metarcvr.char = -1
			metatoken = -1
			goto metanewstate /* try again in the same state */
		}
	}

	/* reduction by production metan */
	if metaDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", metan, metaStatname(metastate))
	}

	metant := metan
	metapt := metap
	_ = metapt // guard against "declared and not used"

	metap -= metaR2[metan]
	// metap is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if metap+1 >= len(metaS) {
		nyys := make([]metaSymType, len(metaS)*2)
		copy(nyys, metaS)
		metaS = nyys
	}
	metaVAL = metaS[metap+1]

	/* consult goto table to find next state */
	metan = metaR1[metan]
	metag := metaPgo[metan]
	metaj := metag + metaS[metap].yys + 1

	if metaj >= metaLast {
		metastate = metaAct[metag]
	} else {
		metastate = metaAct[metaj]
		if metaChk[metastate] != -metan {
			metastate = metaAct[metag]
		}
	}
	// dummy call; replaced with literal code
	switch metant {

	case 1:
		metaDollar = metaS[metapt-1 : metapt+1]
//line parser.y:25
		{
			fmt.Println("Init content")
		}
	case 2:
		metaDollar = metaS[metapt-0 : metapt+1]
//line parser.y:29
		{
			fmt.Println("empty")
		}
	case 3:
		metaDollar = metaS[metapt-2 : metapt+1]
//line parser.y:33
		{
			fmt.Println("FreeToken:", metaDollar[2].token.Pos)
		}
	case 4:
		metaDollar = metaS[metapt-1 : metapt+1]
//line parser.y:38
		{
			metaVAL.token = metaDollar[1].token
		}
	case 5:
		metaDollar = metaS[metapt-1 : metapt+1]
//line parser.y:38
		{
			metaVAL.token = metaDollar[1].token
		}
	case 6:
		metaDollar = metaS[metapt-1 : metapt+1]
//line parser.y:38
		{
			metaVAL.token = metaDollar[1].token
		}
	case 7:
		metaDollar = metaS[metapt-1 : metapt+1]
//line parser.y:38
		{
			metaVAL.token = metaDollar[1].token
		}
	case 8:
		metaDollar = metaS[metapt-1 : metapt+1]
//line parser.y:38
		{
			metaVAL.token = metaDollar[1].token
		}
	}
	goto metastack /* stack new state and value */
}
