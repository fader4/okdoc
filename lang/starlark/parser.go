// Code generated by goyacc -p starlark -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package starlark

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/fader4/okdoc/syntax"
	"log"
	"strings"
)

//line parser.y:13
type starlarkSymType struct {
	yys   int
	token *syntax.TokenWithData

	Comment    *Comment
	Return     *Return
	Module     *Module
	Load       *Load
	Def        *Def
	DefField   *DefField
	DefFields  []*DefField
	DictField  *DictField
	DictFields []*DictField
	CallFunc   *CallFunc

	val  syntax.Value
	arr  syntax.Array
	map_ syntax.Map
}

const ident = 57346
const nullLiteral = 57347
const stringLiteral = 57348
const boolLiteral = 57349
const integerLiteral = 57350
const floatLiteral = 57351
const dict = 57352
const returnKeyword = 57353
const commentInline = 57354
const def = 57355
const endDef = 57356
const load = 57357
const endLoad = 57358
const module = 57359
const endModule = 57360
const commentMultiline = 57361
const endCommentMultiline = 57362

var starlarkToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ident",
	"'('",
	"')'",
	"'='",
	"','",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'.'",
	"'\"'",
	"'\\''",
	"'*'",
	"':'",
	"nullLiteral",
	"stringLiteral",
	"boolLiteral",
	"integerLiteral",
	"floatLiteral",
	"dict",
	"returnKeyword",
	"commentInline",
	"def",
	"endDef",
	"load",
	"endLoad",
	"module",
	"endModule",
	"commentMultiline",
	"endCommentMultiline",
}

var starlarkStatenames = [...]string{}

const starlarkEofCode = 1
const starlarkErrCode = 2
const starlarkInitialStackSize = 16

//line yacctab:1
var starlarkExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const starlarkPrivate = 57344

const starlarkLast = 231

var starlarkAct = [...]int{
	67, 59, 65, 56, 29, 108, 21, 64, 61, 62,
	69, 106, 63, 43, 133, 66, 18, 46, 12, 39,
	35, 36, 37, 38, 45, 33, 69, 86, 57, 74,
	31, 121, 30, 20, 47, 32, 51, 52, 10, 8,
	13, 44, 11, 58, 70, 85, 9, 84, 19, 43,
	25, 80, 33, 76, 75, 54, 83, 31, 79, 30,
	77, 51, 32, 78, 57, 136, 81, 68, 41, 51,
	91, 115, 40, 87, 42, 95, 15, 51, 94, 107,
	43, 39, 35, 36, 37, 38, 69, 89, 58, 96,
	99, 139, 53, 110, 95, 100, 97, 112, 102, 109,
	98, 68, 41, 101, 90, 50, 40, 26, 42, 89,
	122, 51, 123, 92, 120, 119, 130, 95, 125, 131,
	124, 110, 134, 128, 22, 126, 95, 109, 127, 135,
	132, 129, 14, 68, 41, 137, 43, 138, 40, 82,
	42, 71, 117, 113, 118, 114, 16, 39, 35, 36,
	37, 38, 69, 68, 41, 60, 116, 88, 40, 89,
	42, 73, 48, 72, 49, 2, 1, 39, 35, 36,
	37, 38, 69, 68, 41, 104, 103, 23, 40, 24,
	42, 93, 55, 17, 7, 105, 111, 39, 35, 36,
	37, 38, 69, 43, 41, 27, 28, 6, 40, 5,
	42, 4, 3, 0, 0, 34, 0, 39, 35, 36,
	37, 38, 43, 41, 0, 0, 0, 40, 0, 42,
	0, 0, 0, 0, 34, 0, 39, 35, 36, 37,
	38,
}

var starlarkPact = [...]int{
	-1000, -1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 127, 69, 142, 29, -24, 119, 171, -1000, -1000,
	43, 102, 189, -1000, 29, 5, -2, 17, 156, -1000,
	-1000, -1000, -1000, 98, 76, -1000, -1000, -1000, -1000, -1000,
	45, 149, 129, -1000, -1000, -1000, 155, -1000, 12, 208,
	169, 135, 23, 132, -1000, 37, -1000, 10, 56, 151,
	-1000, -1000, -1000, -1000, -1000, 23, -1000, -1000, 99, 65,
	101, -1000, 132, -1000, -1000, -1000, 23, -1000, -1000, -1000,
	-1000, -1000, -1000, 23, -1000, 9, 1, 97, -1000, 169,
	63, 132, -1000, 137, -1000, 64, -1000, -1000, -1000, 23,
	-1000, -1000, -1000, 136, 109, 108, -1000, 15, -1000, -1000,
	64, 104, -1000, -1000, 132, 169, 132, -1000, 169, -1000,
	-1000, 3, -1000, 132, -1000, 23, -1000, -1000, -1000, -1000,
	-1000, 48, -1000, 169, -1000, -1000, -13, 79, -1000, -1000,
}

var starlarkPgo = [...]int{
	0, 202, 201, 199, 197, 4, 196, 5, 0, 186,
	185, 15, 184, 183, 12, 1, 182, 3, 181, 176,
	175, 9, 16, 2, 8, 11, 7, 166, 165, 156,
}

var starlarkR1 = [...]int{
	0, 27, 28, 28, 28, 28, 28, 28, 12, 12,
	6, 6, 6, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 1, 1, 2, 3, 13,
	13, 13, 22, 22, 4, 4, 18, 18, 18, 11,
	11, 11, 19, 19, 19, 25, 25, 20, 10, 23,
	23, 21, 21, 21, 21, 21, 14, 14, 14, 14,
	15, 15, 15, 24, 24, 24, 24, 24, 24, 26,
	26, 16, 16, 16, 17, 17, 17, 17, 29, 17,
	8, 9, 9, 9, 7, 7, 7, 7, 7, 7,
}

var starlarkR2 = [...]int{
	0, 1, 0, 2, 2, 2, 2, 2, 5, 6,
	1, 3, 2, 1, 1, 1, 1, 2, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 4, 1,
	3, 2, 1, 3, 8, 6, 3, 1, 2, 4,
	4, 4, 3, 1, 2, 1, 1, 5, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 2, 2,
	1, 3, 2, 1, 1, 1, 1, 1, 1, 2,
	3, 1, 3, 2, 3, 3, 3, 3, 0, 7,
	4, 3, 1, 2, 3, 3, 3, 3, 3, 3,
}

var starlarkChk = [...]int{
	-1000, -27, -28, -1, -2, -3, -4, -12, 25, 32,
	24, 28, 4, 26, 5, 7, 4, -13, -22, 19,
	4, 30, 5, 6, 8, 7, 5, 6, -6, -5,
	-21, -26, -14, -23, 16, 19, 20, 21, 22, 18,
	9, 5, 11, 4, -22, 19, 19, 17, 6, 8,
	7, 13, -23, 16, 10, -16, -17, 19, -23, -15,
	6, -24, -21, -14, -26, -23, -11, -8, 4, 23,
	-15, 12, 8, 6, 17, -5, -23, -21, -14, -26,
	-8, -11, 4, -23, 10, 8, 17, 17, 6, 8,
	5, 5, 12, -18, -7, -23, -17, -21, -14, -23,
	-26, -11, -24, -19, -20, -10, -25, 16, -7, -24,
	-23, -9, -7, 6, 8, 7, -29, 6, 8, 6,
	6, 16, 6, 8, -7, -23, -21, -14, -26, -11,
	-8, -23, -25, 11, -8, -7, 17, -15, -8, 12,
}

var starlarkDef = [...]int{
	2, -2, 1, 3, 4, 5, 6, 7, 25, 26,
	27, 0, 0, 0, 0, 0, 0, 0, 29, 32,
	0, 0, 0, 28, 31, 0, 0, 0, 0, 10,
	13, 14, 15, 16, 0, 51, 52, 53, 54, 55,
	0, 0, 0, 49, 30, 33, 0, 8, 0, 12,
	0, 0, 17, 0, 69, 0, 71, 0, 0, 0,
	58, 60, 63, 64, 65, 66, 67, 68, 49, 0,
	0, 59, 0, 35, 9, 11, 19, 20, 21, 22,
	23, 24, 50, 18, 70, 73, 0, 0, 56, 62,
	0, 0, 57, 0, 37, 0, 72, 74, 75, 76,
	77, 78, 61, 0, 0, 0, 43, 0, 45, 46,
	66, 0, 82, 34, 38, 0, 0, 39, 44, 40,
	41, 0, 80, 83, 36, 84, 85, 86, 87, 88,
	89, 0, 42, 0, 48, 81, 0, 0, 79, 47,
}

var starlarkTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 14, 3, 3, 3, 3, 15,
	5, 6, 16, 3, 8, 3, 13, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 17, 3,
	3, 7, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 11, 3, 12, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 3, 10,
}

var starlarkTok2 = [...]int{
	2, 3, 4, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33,
}

var starlarkTok3 = [...]int{
	0,
}

var starlarkErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	starlarkDebug        = 0
	starlarkErrorVerbose = false
)

type starlarkLexer interface {
	Lex(lval *starlarkSymType) int
	Error(s string)
}

type starlarkParser interface {
	Parse(starlarkLexer) int
	Lookahead() int
}

type starlarkParserImpl struct {
	lval  starlarkSymType
	stack [starlarkInitialStackSize]starlarkSymType
	char  int
}

func (p *starlarkParserImpl) Lookahead() int {
	return p.char
}

func starlarkNewParser() starlarkParser {
	return &starlarkParserImpl{}
}

const starlarkFlag = -1000

func starlarkTokname(c int) string {
	if c >= 1 && c-1 < len(starlarkToknames) {
		if starlarkToknames[c-1] != "" {
			return starlarkToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func starlarkStatname(s int) string {
	if s >= 0 && s < len(starlarkStatenames) {
		if starlarkStatenames[s] != "" {
			return starlarkStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func starlarkErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !starlarkErrorVerbose {
		return "syntax error"
	}

	for _, e := range starlarkErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + starlarkTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := starlarkPact[state]
	for tok := TOKSTART; tok-1 < len(starlarkToknames); tok++ {
		if n := base + tok; n >= 0 && n < starlarkLast && starlarkChk[starlarkAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if starlarkDef[state] == -2 {
		i := 0
		for starlarkExca[i] != -1 || starlarkExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; starlarkExca[i] >= 0; i += 2 {
			tok := starlarkExca[i]
			if tok < TOKSTART || starlarkExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if starlarkExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += starlarkTokname(tok)
	}
	return res
}

func starlarklex1(lex starlarkLexer, lval *starlarkSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = starlarkTok1[0]
		goto out
	}
	if char < len(starlarkTok1) {
		token = starlarkTok1[char]
		goto out
	}
	if char >= starlarkPrivate {
		if char < starlarkPrivate+len(starlarkTok2) {
			token = starlarkTok2[char-starlarkPrivate]
			goto out
		}
	}
	for i := 0; i < len(starlarkTok3); i += 2 {
		token = starlarkTok3[i+0]
		if token == char {
			token = starlarkTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = starlarkTok2[1] /* unknown char */
	}
	if starlarkDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", starlarkTokname(token), uint(char))
	}
	return char, token
}

func starlarkParse(starlarklex starlarkLexer) int {
	return starlarkNewParser().Parse(starlarklex)
}

func (starlarkrcvr *starlarkParserImpl) Parse(starlarklex starlarkLexer) int {
	var starlarkn int
	var starlarkVAL starlarkSymType
	var starlarkDollar []starlarkSymType
	_ = starlarkDollar // silence set and not used
	starlarkS := starlarkrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	starlarkstate := 0
	starlarkrcvr.char = -1
	starlarktoken := -1 // starlarkrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		starlarkstate = -1
		starlarkrcvr.char = -1
		starlarktoken = -1
	}()
	starlarkp := -1
	goto starlarkstack

ret0:
	return 0

ret1:
	return 1

starlarkstack:
	/* put a state and value onto the stack */
	if starlarkDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", starlarkTokname(starlarktoken), starlarkStatname(starlarkstate))
	}

	starlarkp++
	if starlarkp >= len(starlarkS) {
		nyys := make([]starlarkSymType, len(starlarkS)*2)
		copy(nyys, starlarkS)
		starlarkS = nyys
	}
	starlarkS[starlarkp] = starlarkVAL
	starlarkS[starlarkp].yys = starlarkstate

starlarknewstate:
	starlarkn = starlarkPact[starlarkstate]
	if starlarkn <= starlarkFlag {
		goto starlarkdefault /* simple state */
	}
	if starlarkrcvr.char < 0 {
		starlarkrcvr.char, starlarktoken = starlarklex1(starlarklex, &starlarkrcvr.lval)
	}
	starlarkn += starlarktoken
	if starlarkn < 0 || starlarkn >= starlarkLast {
		goto starlarkdefault
	}
	starlarkn = starlarkAct[starlarkn]
	if starlarkChk[starlarkn] == starlarktoken { /* valid shift */
		starlarkrcvr.char = -1
		starlarktoken = -1
		starlarkVAL = starlarkrcvr.lval
		starlarkstate = starlarkn
		if Errflag > 0 {
			Errflag--
		}
		goto starlarkstack
	}

starlarkdefault:
	/* default state action */
	starlarkn = starlarkDef[starlarkstate]
	if starlarkn == -2 {
		if starlarkrcvr.char < 0 {
			starlarkrcvr.char, starlarktoken = starlarklex1(starlarklex, &starlarkrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if starlarkExca[xi+0] == -1 && starlarkExca[xi+1] == starlarkstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			starlarkn = starlarkExca[xi+0]
			if starlarkn < 0 || starlarkn == starlarktoken {
				break
			}
		}
		starlarkn = starlarkExca[xi+1]
		if starlarkn < 0 {
			goto ret0
		}
	}
	if starlarkn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			starlarklex.Error(starlarkErrorMessage(starlarkstate, starlarktoken))
			Nerrs++
			if starlarkDebug >= 1 {
				__yyfmt__.Printf("%s", starlarkStatname(starlarkstate))
				__yyfmt__.Printf(" saw %s\n", starlarkTokname(starlarktoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for starlarkp >= 0 {
				starlarkn = starlarkPact[starlarkS[starlarkp].yys] + starlarkErrCode
				if starlarkn >= 0 && starlarkn < starlarkLast {
					starlarkstate = starlarkAct[starlarkn] /* simulate a shift of "error" */
					if starlarkChk[starlarkstate] == starlarkErrCode {
						goto starlarkstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if starlarkDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", starlarkS[starlarkp].yys)
				}
				starlarkp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if starlarkDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", starlarkTokname(starlarktoken))
			}
			if starlarktoken == starlarkEofCode {
				goto ret1
			}
			starlarkrcvr.char = -1
			starlarktoken = -1
			goto starlarknewstate /* try again in the same state */
		}
	}

	/* reduction by production starlarkn */
	if starlarkDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", starlarkn, starlarkStatname(starlarkstate))
	}

	starlarknt := starlarkn
	starlarkpt := starlarkp
	_ = starlarkpt // guard against "declared and not used"

	starlarkp -= starlarkR2[starlarkn]
	// starlarkp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if starlarkp+1 >= len(starlarkS) {
		nyys := make([]starlarkSymType, len(starlarkS)*2)
		copy(nyys, starlarkS)
		starlarkS = nyys
	}
	starlarkVAL = starlarkS[starlarkp+1]

	/* consult goto table to find next state */
	starlarkn = starlarkR1[starlarkn]
	starlarkg := starlarkPgo[starlarkn]
	starlarkj := starlarkg + starlarkS[starlarkp].yys + 1

	if starlarkj >= starlarkLast {
		starlarkstate = starlarkAct[starlarkg]
	} else {
		starlarkstate = starlarkAct[starlarkj]
		if starlarkChk[starlarkstate] != -starlarkn {
			starlarkstate = starlarkAct[starlarkg]
		}
	}
	// dummy call; replaced with literal code
	switch starlarknt {

	case 2:
		starlarkDollar = starlarkS[starlarkpt-0 : starlarkpt+1]
//line parser.y:70
		{
		}
	case 3:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:71
		{
			starlarklex.(*starlarkLex).Comment = starlarkDollar[2].Comment
			// fmt.Printf("Comment %T: %q\n", $2, string($2.MustBytes()))
		}
	case 4:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:74
		{
			starlarklex.(*starlarkLex).Return = starlarkDollar[2].Return
			// fmt.Printf("Return %T: %q\n", $2, string($2.MustBytes()))
		}
	case 5:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:77
		{
			starlarklex.(*starlarkLex).Load = starlarkDollar[2].Load
			// fmt.Printf("Load %T: %d\n", $2, len($2.Fields))
		}
	case 6:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:80
		{
			starlarklex.(*starlarkLex).Module = starlarkDollar[2].Module
			// fmt.Printf("Module %T: %d\n", $2, len($2.Fields))
		}
	case 7:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:83
		{
			starlarklex.(*starlarkLex).Def = starlarkDollar[2].Def
			// fmt.Printf("Def %T: %d\n", $2, len($2.Fields))
		}
	case 8:
		starlarkDollar = starlarkS[starlarkpt-5 : starlarkpt+1]
//line parser.y:92
		{
			starlarkVAL.Def = &Def{TokenWithData: starlarkDollar[1].token, Name: starlarkDollar[2].token.Ident()}
		}
	case 9:
		starlarkDollar = starlarkS[starlarkpt-6 : starlarkpt+1]
//line parser.y:94
		{
			starlarkVAL.Def = &Def{TokenWithData: starlarkDollar[1].token, Name: starlarkDollar[2].token.Ident(), Fields: starlarkDollar[4].DefFields}
		}
	case 10:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:98
		{
			starlarkVAL.DefFields = []*DefField{starlarkDollar[1].DefField}
		}
	case 11:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:100
		{
			starlarkVAL.DefFields = append(starlarkDollar[1].DefFields, starlarkDollar[3].DefField)
		}
	case 12:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:102
		{
			starlarkVAL.DefFields = starlarkDollar[1].DefFields
		}
	case 13:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:107
		{
			starlarkVAL.DefField = &DefField{
				Value: starlarkDollar[1].val,
			}
		}
	case 14:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:112
		{
			starlarkVAL.DefField = &DefField{
				Value: starlarkDollar[1].map_,
			}
		}
	case 15:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:117
		{
			starlarkVAL.DefField = &DefField{
				Value: starlarkDollar[1].arr,
			}
		}
	case 16:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:122
		{
			starlarkVAL.DefField = &DefField{
				Value: starlarkDollar[1].val,
			}
		}
	case 17:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:127
		{
			starlarkVAL.DefField = &DefField{
				Value:   starlarkDollar[1].token,
				Varargs: true,
			}
		}
	case 18:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:133
		{
			starlarkVAL.DefField = &DefField{
				Value:  starlarkDollar[1].token,
				Kwargs: true,
			}
		}
	case 19:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:139
		{
			starlarkVAL.DefField = &DefField{
				Key:   starlarkDollar[1].val,
				Value: starlarkDollar[3].val,
			}
		}
	case 20:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:145
		{
			starlarkVAL.DefField = &DefField{
				Key:   starlarkDollar[1].val,
				Value: starlarkDollar[3].val,
			}
		}
	case 21:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:151
		{
			starlarkVAL.DefField = &DefField{
				Key:   starlarkDollar[1].val,
				Value: starlarkDollar[3].arr,
			}
		}
	case 22:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:157
		{
			starlarkVAL.DefField = &DefField{
				Key:   starlarkDollar[1].val,
				Value: starlarkDollar[3].map_,
			}
		}
	case 23:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:163
		{
			starlarkVAL.DefField = &DefField{
				Key:   starlarkDollar[1].val,
				Value: starlarkDollar[3].DictFields,
			}
		}
	case 24:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:169
		{
			starlarkVAL.DefField = &DefField{
				Key:   starlarkDollar[1].val,
				Value: starlarkDollar[3].CallFunc,
			}
		}
	case 25:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:181
		{
			starlarkVAL.Comment = &Comment{starlarkDollar[1].token, false}
		}
	case 26:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:183
		{
			starlarkVAL.Comment = &Comment{starlarkDollar[1].token, true}
		}
	case 27:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:191
		{
			starlarkVAL.Return = &Return{starlarkDollar[1].token}
		}
	case 28:
		starlarkDollar = starlarkS[starlarkpt-4 : starlarkpt+1]
//line parser.y:199
		{
			starlarkVAL.Load = &Load{Fields: starlarkDollar[3].arr}
		}
	case 29:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:203
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].val}
		}
	case 30:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:205
		{
			starlarkVAL.arr = append(starlarkDollar[1].arr, starlarkDollar[3].val)
		}
	case 31:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:207
		{
			starlarkVAL.arr = starlarkDollar[1].arr
		}
	case 32:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:212
		{
			starlarkVAL.val = syntax.Array{syntax.Null_{}, starlarkDollar[1].token.String()}
		}
	case 33:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:215
		{
			starlarkVAL.val = syntax.Array{starlarkDollar[1].token.Ident(), starlarkDollar[3].token.String()}
		}
	case 34:
		starlarkDollar = starlarkS[starlarkpt-8 : starlarkpt+1]
//line parser.y:223
		{
			starlarkVAL.Module = &Module{
				Ident:  starlarkDollar[1].token.Ident(),
				Name:   starlarkDollar[5].token.String(),
				Fields: starlarkDollar[7].arr,
			}
		}
	case 35:
		starlarkDollar = starlarkS[starlarkpt-6 : starlarkpt+1]
//line parser.y:229
		{
			starlarkVAL.Module = &Module{
				Ident: starlarkDollar[1].token.Ident(),
				Name:  starlarkDollar[5].token.String(),
			}
		}
	case 36:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:236
		{
			starlarkVAL.arr = append(starlarkVAL.arr, starlarkDollar[3].DictField)
		}
	case 37:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:238
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].DictField}
		}
	case 38:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:240
		{
			starlarkVAL.arr = starlarkDollar[1].arr
		}
	case 39:
		starlarkDollar = starlarkS[starlarkpt-4 : starlarkpt+1]
//line parser.y:244
		{
			starlarkVAL.CallFunc = &CallFunc{
				Name:   starlarkDollar[1].token.Ident(),
				Fields: starlarkDollar[3].arr,
			}
		}
	case 40:
		starlarkDollar = starlarkS[starlarkpt-4 : starlarkpt+1]
//line parser.y:249
		{
			starlarkVAL.CallFunc = &CallFunc{
				Name:             starlarkDollar[1].token.Ident(),
				ArbitraryArrArgs: starlarkDollar[3].arr,
			}
		}
	case 41:
		starlarkDollar = starlarkS[starlarkpt-4 : starlarkpt+1]
//line parser.y:254
		{
			starlarkVAL.CallFunc = &CallFunc{
				Name:               starlarkDollar[1].token.Ident(),
				ArbitraryNamedArgs: starlarkDollar[3].DictFields,
			}
		}
	case 42:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:262
		{
			starlarkVAL.arr = append(starlarkDollar[1].arr, starlarkDollar[3].val)
		}
	case 43:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:264
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].val}
		}
	case 44:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:266
		{
			starlarkVAL.arr = starlarkDollar[1].arr
		}
	case 45:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:270
		{
			starlarkVAL.val = starlarkDollar[1].DictField
		}
	case 46:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:272
		{
			starlarkVAL.val = starlarkDollar[1].val
		}
	case 47:
		starlarkDollar = starlarkS[starlarkpt-5 : starlarkpt+1]
//line parser.y:276
		{
			starlarkVAL.arr = starlarkDollar[4].arr
		}
	case 48:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:279
		{
			starlarkVAL.DictFields = starlarkDollar[3].DictFields
		}
	case 49:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:287
		{
			starlarkVAL.val = starlarkDollar[1].token.Ident()
		}
	case 50:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:289
		{
			starlarkVAL.val = starlarkDollar[1].val.(syntax.Ident_).Append(starlarkDollar[3].token.Ident())
		}
	case 51:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:293
		{
			starlarkVAL.val = starlarkDollar[1].token.String()
		}
	case 52:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:295
		{
			starlarkVAL.val = starlarkDollar[1].token.Bool()
		}
	case 53:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:297
		{
			starlarkVAL.val = starlarkDollar[1].token.Int()
		}
	case 54:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:299
		{
			starlarkVAL.val = starlarkDollar[1].token.Float()
		}
	case 55:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:301
		{
			starlarkVAL.val = starlarkDollar[1].token.Null()
		}
	case 56:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:306
		{
			// TODO: it is tuple
			starlarkVAL.arr = starlarkDollar[2].arr
		}
	case 57:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:309
		{
			// TODO: it is list
			starlarkVAL.arr = starlarkDollar[2].arr
		}
	case 58:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:312
		{
			starlarkVAL.arr = syntax.Array{}
		}
	case 59:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:314
		{
			starlarkVAL.arr = syntax.Array{}
		}
	case 60:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:318
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].val}
		}
	case 61:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:320
		{
			starlarkDollar[1].arr.Add(starlarkDollar[3].val)
			starlarkVAL.arr = starlarkDollar[1].arr
		}
	case 62:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:323
		{
			starlarkVAL.arr = starlarkDollar[1].arr
		}
	case 63:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:327
		{
			starlarkVAL.val = starlarkDollar[1].val
		}
	case 64:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:329
		{
			starlarkVAL.val = starlarkDollar[1].arr
		}
	case 65:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:331
		{
			starlarkVAL.val = starlarkDollar[1].map_
		}
	case 66:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:333
		{
			starlarkVAL.val = starlarkDollar[1].val
		}
	case 67:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:335
		{
			starlarkVAL.val = starlarkDollar[1].CallFunc
		}
	case 68:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:337
		{
			starlarkVAL.val = starlarkDollar[1].DictFields
		}
	case 69:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:341
		{
			starlarkVAL.map_ = syntax.Map{}
		}
	case 70:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:343
		{
			starlarkVAL.map_ = syntax.Map{}
			for _, item := range starlarkDollar[2].arr {
				key := item.(syntax.Array)[0]
				switch in := key.(type) {
				case syntax.StringLiteral:
					starlarkVAL.map_.Keys = append(starlarkVAL.map_.Keys, string(in))
				case syntax.Ident_:
					if len(in) > 0 {
						starlarkVAL.map_.Keys = append(starlarkVAL.map_.Keys, "@"+strings.Join(in, "."))
					} else {
						starlarkVAL.map_.Keys = append(starlarkVAL.map_.Keys, "")
					}
				case nil:
					starlarkVAL.map_.Keys = append(starlarkVAL.map_.Keys, "")
				default:
					log.Printf("starlark#Fields: not supported key type %T\n", key)
				}
				starlarkVAL.map_.Values.Add(item.(syntax.Array)[1])
			}
		}
	case 71:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:365
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].arr}
		}
	case 72:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:367
		{
			starlarkDollar[1].arr.Add(starlarkDollar[3].arr)
			starlarkVAL.arr = starlarkDollar[1].arr
		}
	case 73:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:370
		{
			starlarkVAL.arr = starlarkDollar[1].arr
		}
	case 74:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:374
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].token.String(), starlarkDollar[3].val}
		}
	case 75:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:376
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].val, starlarkDollar[3].arr}
		}
	case 76:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:378
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].val, starlarkDollar[3].val}
		}
	case 77:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:380
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].val, starlarkDollar[3].map_}
		}
	case 78:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:382
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].val, starlarkDollar[3].CallFunc}
		}
	case 79:
		starlarkDollar = starlarkS[starlarkpt-7 : starlarkpt+1]
//line parser.y:384
		{
			starlarkVAL.arr = syntax.Array{starlarkDollar[1].val, starlarkDollar[3].CallFunc}
		}
	case 80:
		starlarkDollar = starlarkS[starlarkpt-4 : starlarkpt+1]
//line parser.y:388
		{
			starlarkVAL.DictFields = starlarkDollar[3].DictFields
		}
	case 81:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:392
		{
			starlarkVAL.DictFields = append(starlarkDollar[1].DictFields, starlarkDollar[3].DictField)
		}
	case 82:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:394
		{
			starlarkVAL.DictFields = []*DictField{starlarkDollar[1].DictField}
		}
	case 83:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:396
		{
			starlarkVAL.DictFields = starlarkDollar[1].DictFields
		}
	case 84:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:401
		{
			starlarkVAL.DictField = &DictField{Key: starlarkDollar[1].val, Value: starlarkDollar[3].val}
		}
	case 85:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:404
		{
			starlarkVAL.DictField = &DictField{Key: starlarkDollar[1].val, Value: starlarkDollar[3].val}
		}
	case 86:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:407
		{
			starlarkVAL.DictField = &DictField{Key: starlarkDollar[1].val, Value: starlarkDollar[3].arr}
		}
	case 87:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:410
		{
			starlarkVAL.DictField = &DictField{Key: starlarkDollar[1].val, Value: starlarkDollar[3].map_}
		}
	case 88:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:413
		{
			starlarkVAL.DictField = &DictField{Key: starlarkDollar[1].val, ValueCallFn: starlarkDollar[3].CallFunc}
		}
	case 89:
		starlarkDollar = starlarkS[starlarkpt-3 : starlarkpt+1]
//line parser.y:416
		{
			starlarkVAL.DictField = &DictField{Key: starlarkDollar[1].val, ValueDict: starlarkDollar[3].DictFields}
		}
	}
	goto starlarkstack /* stack new state and value */
}
