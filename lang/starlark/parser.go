// Code generated by goyacc -p starlark -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package starlark

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
)

//line parser.y:11
type starlarkSymType struct {
	yys   int
	token *Token

	// val Value
	// arr Array
	// map_ Map
}

const ident = 57346
const nullLiteral = 57347
const stringLiteral = 57348
const boolLiteral = 57349
const integerLiteral = 57350
const floatLiteral = 57351
const commentInline = 57352
const commentMultiline = 57353
const beginDef = 57354
const endDef = 57355
const returnKeyword = 57356
const beginLoad = 57357
const endLoad = 57358
const beginModule = 57359
const endModule = 57360
const beginMultilineComment = 57361
const endMultilineComment = 57362

var starlarkToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ident",
	"'('",
	"')'",
	"'='",
	"','",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'.'",
	"nullLiteral",
	"stringLiteral",
	"boolLiteral",
	"integerLiteral",
	"floatLiteral",
	"commentInline",
	"commentMultiline",
	"beginDef",
	"endDef",
	"returnKeyword",
	"beginLoad",
	"endLoad",
	"beginModule",
	"endModule",
	"beginMultilineComment",
	"endMultilineComment",
}

var starlarkStatenames = [...]string{}

const starlarkEofCode = 1
const starlarkErrCode = 2
const starlarkInitialStackSize = 16

//line yacctab:1
var starlarkExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const starlarkPrivate = 57344

const starlarkLast = 5

var starlarkAct = [...]int{
	4, 5, 2, 1, 3,
}

var starlarkPact = [...]int{
	-1000, -1000, -19, -1000, -1000, -1000,
}

var starlarkPgo = [...]int{
	0, 4, 3, 2,
}

var starlarkR1 = [...]int{
	0, 2, 3, 3, 1, 1,
}

var starlarkR2 = [...]int{
	0, 1, 0, 2, 1, 1,
}

var starlarkChk = [...]int{
	-1000, -2, -3, -1, 19, 20,
}

var starlarkDef = [...]int{
	2, -2, 1, 3, 4, 5,
}

var starlarkTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 3, 3, 8, 3, 13, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 7, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 11, 3, 12, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 9, 3, 10,
}

var starlarkTok2 = [...]int{
	2, 3, 4, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29,
}

var starlarkTok3 = [...]int{
	0,
}

var starlarkErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	starlarkDebug        = 0
	starlarkErrorVerbose = false
)

type starlarkLexer interface {
	Lex(lval *starlarkSymType) int
	Error(s string)
}

type starlarkParser interface {
	Parse(starlarkLexer) int
	Lookahead() int
}

type starlarkParserImpl struct {
	lval  starlarkSymType
	stack [starlarkInitialStackSize]starlarkSymType
	char  int
}

func (p *starlarkParserImpl) Lookahead() int {
	return p.char
}

func starlarkNewParser() starlarkParser {
	return &starlarkParserImpl{}
}

const starlarkFlag = -1000

func starlarkTokname(c int) string {
	if c >= 1 && c-1 < len(starlarkToknames) {
		if starlarkToknames[c-1] != "" {
			return starlarkToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func starlarkStatname(s int) string {
	if s >= 0 && s < len(starlarkStatenames) {
		if starlarkStatenames[s] != "" {
			return starlarkStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func starlarkErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !starlarkErrorVerbose {
		return "syntax error"
	}

	for _, e := range starlarkErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + starlarkTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := starlarkPact[state]
	for tok := TOKSTART; tok-1 < len(starlarkToknames); tok++ {
		if n := base + tok; n >= 0 && n < starlarkLast && starlarkChk[starlarkAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if starlarkDef[state] == -2 {
		i := 0
		for starlarkExca[i] != -1 || starlarkExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; starlarkExca[i] >= 0; i += 2 {
			tok := starlarkExca[i]
			if tok < TOKSTART || starlarkExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if starlarkExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += starlarkTokname(tok)
	}
	return res
}

func starlarklex1(lex starlarkLexer, lval *starlarkSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = starlarkTok1[0]
		goto out
	}
	if char < len(starlarkTok1) {
		token = starlarkTok1[char]
		goto out
	}
	if char >= starlarkPrivate {
		if char < starlarkPrivate+len(starlarkTok2) {
			token = starlarkTok2[char-starlarkPrivate]
			goto out
		}
	}
	for i := 0; i < len(starlarkTok3); i += 2 {
		token = starlarkTok3[i+0]
		if token == char {
			token = starlarkTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = starlarkTok2[1] /* unknown char */
	}
	if starlarkDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", starlarkTokname(token), uint(char))
	}
	return char, token
}

func starlarkParse(starlarklex starlarkLexer) int {
	return starlarkNewParser().Parse(starlarklex)
}

func (starlarkrcvr *starlarkParserImpl) Parse(starlarklex starlarkLexer) int {
	var starlarkn int
	var starlarkVAL starlarkSymType
	var starlarkDollar []starlarkSymType
	_ = starlarkDollar // silence set and not used
	starlarkS := starlarkrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	starlarkstate := 0
	starlarkrcvr.char = -1
	starlarktoken := -1 // starlarkrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		starlarkstate = -1
		starlarkrcvr.char = -1
		starlarktoken = -1
	}()
	starlarkp := -1
	goto starlarkstack

ret0:
	return 0

ret1:
	return 1

starlarkstack:
	/* put a state and value onto the stack */
	if starlarkDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", starlarkTokname(starlarktoken), starlarkStatname(starlarkstate))
	}

	starlarkp++
	if starlarkp >= len(starlarkS) {
		nyys := make([]starlarkSymType, len(starlarkS)*2)
		copy(nyys, starlarkS)
		starlarkS = nyys
	}
	starlarkS[starlarkp] = starlarkVAL
	starlarkS[starlarkp].yys = starlarkstate

starlarknewstate:
	starlarkn = starlarkPact[starlarkstate]
	if starlarkn <= starlarkFlag {
		goto starlarkdefault /* simple state */
	}
	if starlarkrcvr.char < 0 {
		starlarkrcvr.char, starlarktoken = starlarklex1(starlarklex, &starlarkrcvr.lval)
	}
	starlarkn += starlarktoken
	if starlarkn < 0 || starlarkn >= starlarkLast {
		goto starlarkdefault
	}
	starlarkn = starlarkAct[starlarkn]
	if starlarkChk[starlarkn] == starlarktoken { /* valid shift */
		starlarkrcvr.char = -1
		starlarktoken = -1
		starlarkVAL = starlarkrcvr.lval
		starlarkstate = starlarkn
		if Errflag > 0 {
			Errflag--
		}
		goto starlarkstack
	}

starlarkdefault:
	/* default state action */
	starlarkn = starlarkDef[starlarkstate]
	if starlarkn == -2 {
		if starlarkrcvr.char < 0 {
			starlarkrcvr.char, starlarktoken = starlarklex1(starlarklex, &starlarkrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if starlarkExca[xi+0] == -1 && starlarkExca[xi+1] == starlarkstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			starlarkn = starlarkExca[xi+0]
			if starlarkn < 0 || starlarkn == starlarktoken {
				break
			}
		}
		starlarkn = starlarkExca[xi+1]
		if starlarkn < 0 {
			goto ret0
		}
	}
	if starlarkn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			starlarklex.Error(starlarkErrorMessage(starlarkstate, starlarktoken))
			Nerrs++
			if starlarkDebug >= 1 {
				__yyfmt__.Printf("%s", starlarkStatname(starlarkstate))
				__yyfmt__.Printf(" saw %s\n", starlarkTokname(starlarktoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for starlarkp >= 0 {
				starlarkn = starlarkPact[starlarkS[starlarkp].yys] + starlarkErrCode
				if starlarkn >= 0 && starlarkn < starlarkLast {
					starlarkstate = starlarkAct[starlarkn] /* simulate a shift of "error" */
					if starlarkChk[starlarkstate] == starlarkErrCode {
						goto starlarkstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if starlarkDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", starlarkS[starlarkp].yys)
				}
				starlarkp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if starlarkDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", starlarkTokname(starlarktoken))
			}
			if starlarktoken == starlarkEofCode {
				goto ret1
			}
			starlarkrcvr.char = -1
			starlarktoken = -1
			goto starlarknewstate /* try again in the same state */
		}
	}

	/* reduction by production starlarkn */
	if starlarkDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", starlarkn, starlarkStatname(starlarkstate))
	}

	starlarknt := starlarkn
	starlarkpt := starlarkp
	_ = starlarkpt // guard against "declared and not used"

	starlarkp -= starlarkR2[starlarkn]
	// starlarkp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if starlarkp+1 >= len(starlarkS) {
		nyys := make([]starlarkSymType, len(starlarkS)*2)
		copy(nyys, starlarkS)
		starlarkS = nyys
	}
	starlarkVAL = starlarkS[starlarkp+1]

	/* consult goto table to find next state */
	starlarkn = starlarkR1[starlarkn]
	starlarkg := starlarkPgo[starlarkn]
	starlarkj := starlarkg + starlarkS[starlarkp].yys + 1

	if starlarkj >= starlarkLast {
		starlarkstate = starlarkAct[starlarkg]
	} else {
		starlarkstate = starlarkAct[starlarkj]
		if starlarkChk[starlarkstate] != -starlarkn {
			starlarkstate = starlarkAct[starlarkg]
		}
	}
	// dummy call; replaced with literal code
	switch starlarknt {

	case 2:
		starlarkDollar = starlarkS[starlarkpt-0 : starlarkpt+1]
//line parser.y:39
		{
		}
	case 3:
		starlarkDollar = starlarkS[starlarkpt-2 : starlarkpt+1]
//line parser.y:40
		{
			fmt.Println("Comment", starlarkDollar[2].token)
		}
	case 4:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:44
		{
			starlarkVAL.token = starlarkDollar[1].token
		}
	case 5:
		starlarkDollar = starlarkS[starlarkpt-1 : starlarkpt+1]
//line parser.y:46
		{
			starlarkVAL.token = starlarkDollar[1].token
		}
	}
	goto starlarkstack /* stack new state and value */
}
